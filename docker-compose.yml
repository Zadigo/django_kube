networks:
  kubes_network:
    driver: bridge

volumes:
  PostgresData:
  NginxLogs:
  RedisData:
  GrafanaStorage:

# secrets:
#   postgres_password:
#     file: ./docker/secrets/postgres-password.txt
#   django_secret_key:
#     file: ./docker/secrets/django-secret-key.txt
#   pg_admin_password:
#     file: ./docker/secrets/pgadmin-password.txt

services:
  main_site:
    build: ./mykube
    container_name: app_django_kubes      
    deploy:
      mode: replicated
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.main_site.priority=1"
      - "traefik.http.routers.main_site.rule=Host(`johnpm.fr`) && PathPrefix(`/`)"
    env_file:
      - ./docker/environment/main_site.env
    volumes:
      - ./mykube:/code
    ports:
      - 8000:8000
    networks:
      - kubes_network

  quart:
    build: ./quart_api
    container_name: app_api_quart
    deploy:
      mode: replicated
      replicas: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.quart.priority=10"
      - "traefik.http.routers.quart.rule=Host(`johnpm.fr`) && PathPrefix(`/quart`)"
      - "traefik.http.middlewares.quart-stripprefix.stripprefix.prefixes=/quart"
      - "traefik.http.routers.quart.middlewares=quart-stripprefix"
    volumes:
      - ~/var/quart/access.log:/quart_api/access.log:rw
      - ~/var/quart/error.log:/quart_api/error.log:rw
      - ~/var/quart/quart_server.log:/quart_api/quartserver.log
    env_file:
      - ./docker/environment/quart.env
    ports:
      - 5000:5000
    networks:
      - kubes_network

  db:
    build: ./docker/database
    container_name: app_database
    restart: always
    env_file:
      - ./docker/environment/main_site.env
      - ./docker/environment/postgres.env
    ports:
      - 5432:5432
    volumes:
      - PostgresData:/var/lib/postgresql/data/
    networks:
      - kubes_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U $$DB_USER -d $$DB_NAME"]
      interval: 5s
      timeout: 5s
      retries: 10

  pgadmin:
    image: dpage/pgadmin4
    container_name: app_pgadmin
    restart: always
    env_file: 
      - ./docker/environment/pgadmin.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.johnpm.fr`)"
    depends_on:
      - db
    ports:
      - 5050:80
    networks:
      - kubes_network

  proxy:
    image: traefik:v3.1
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ~/var/letsencrypt:/letsencrypt
      - ~/var/access.log:/var/log/access.log
      - ~/var/traefik.log:/var/log/traefik.log
      - ./docker/traefik:/etc/traefik
    networks:
      - kubes_network

  redis:
    build: ./docker/redis
    container_name: app_redis
    # https://stackoverflow.com/questions/68461172/docker-compose-redis-password-via-environment-variable
    ports:
      - 6379:6000
    restart: always
    volumes:
      - RedisData:/data
      - ~/var/redis.log:/data/redis.log:rw
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - kubes_network

  memcache:
    image: memcached
    container_name: app_memcache
    ports:
      - 11211:11211
    restart: always
    networks:
      - kubes_network

  n8n:
    image: n8nio/n8n
    container_name: app_n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.johnpm.fr`)"
    ports:
      - 5678:5678
    env_file:
      - ./docker/environment/automation.env
    networks:
      - kubes_network

  prometheus:
    build: ./docker/prometheus
    container_name: app_prometheus
    command: 
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--web.external-url=/prometheus/"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`johnpm.fr`) && PathPrefix(`/prometheus`)"
    ports:
      - 9090:9090
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - kubes_network

  grafana:
    image: grafana/grafana:latest
    container_name: app_grafana
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`johnpm.fr`) && PathPrefix(`/grafana`)"
    env_file:
      - ./docker/environment/grafana.env
      - ./docker/environment/redis.env
    ports:
      - 3000:3000
    volumes:
      - ~/var/grafana.log:/var/log/grafana.log
      - ./docker/grafana/grafana.ini:/etc/grafana/grafana.ini
      - GrafanaStorage:/var/lib/grafana
    networks:
      - kubes_network

  uptimekuma:
    image: louislam/uptime-kuma
    container_name: app_uptime_kuma
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptimekuma.priority=15"
      - "traefik.http.routers.uptimekuma.rule=Host(`uptime.johnpm.fr`)"
      - "traefik.http.middlewares.uptimekuma-replacepath.replacepath.path=/dashboard"
    ports:
      - 3001:3001
    volumes:
      - ~/var/uptime-kuma:/app/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kubes_network

  autokuma:
    image: ghcr.io/bigboot/autokuma:latest
    restart: unless-stopped
    env_file:
      - ./docker/environment/autokuma.env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - uptimekuma
    networks:
      - kubes_network

  autometrics:
    image: autometrics/am-proxy:latest
    container_name: app_autometrics
    ports:
      - 6789:6789
    # environment:
    #   - PROMETHEUS_URL=http://prometheus:9090
    networks:
      - kubes_network

  rabbitmq:
    image: rabbitmq:management
    container_name: app_rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbit.johnpm.fr`)"
      - "traefik.http.routers.uptimekuma.priority=3"
      - "traefik.http.services.django_app.loadbalancer.server.port=15672"
    env_file:
      - ./docker/environment/rabbit.env
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - kubes_network

  second_site:
    build: ./mycelery
    container_name: app_second_site
    command: [ "python", "manage.py", "runserver", "0.0.0.0:8010" ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.second_site.rule=Host(`app.johnpm.fr`) && PathPrefix(`/mycelery`)"
      - "traefik.http.services.second_site.loadbalancer.server.port=8010"
    env_file:
      - ./docker/environment/second_site.env
      - ./docker/environment/rabbit.env
      - ./docker/environment/redis.env
    volumes:
      - ./mycelery:/code
    depends_on:
      - celery
    ports:
      - 8010:8010
    networks:
      - kubes_network

  celery:
    build: ./mycelery
    container_name: celery_kubes
    command: celery -A mycelery.celery_app worker --loglevel=info --logfile=celery.log
    env_file:
      - ./docker/environment/second_site.env
      - ./docker/environment/rabbit.env
      - ./docker/environment/redis.env
    depends_on:
      - rabbitmq
      - celerybeat
    volumes:
      - ./mycelery:/code
    networks:
      - kubes_network
  
  celerybeat:
    build: ./mycelery
    container_name: celery_beat_kubes
    
    command: celery -A mycelery.celery_app beat --loglevel=info
    env_file:
      - ./docker/environment/second_site.env
      - ./docker/environment/rabbit.env
      - ./docker/environment/redis.env
    volumes:
      - ./mycelery:/code
    networks:
      - kubes_network

  flower:
    build: ./mycelery
    container_name: flower_kubes
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flower.priority=8"
      - "traefik.http.routers.flower.rule=Host(`app.johnpm.fr`) && Path(`/flower`)"
      - "traefik.http.services.flower.loadbalancer.server.port=5555"
    command: celery -A mycelery.celery_app flower --loglevel=info
    env_file:
      - ./docker/environment/second_site.env
      - ./docker/environment/rabbit.env
      - ./docker/environment/redis.env
    ports:
      - 5555:80
    volumes:
      - ./mycelery:/code
    networks:
      - kubes_network
